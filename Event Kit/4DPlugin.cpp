/* --------------------------------------------------------------------------------
 #
 #	4DPlugin.c
 #	source generated by 4D Plugin Wizard
 #	Project : Event Kit
 #	author : miyako
 #	2013/03/09
 #
 # --------------------------------------------------------------------------------*/

#include "4DPluginAPI.h"
#include "4DPlugin.h"

#if VERSIONMAC
#include "functions_ekit.h"
#endif

void PluginMain(int32_t selector, PA_PluginParameters params)
{
	try
	{
		int32_t pProcNum = selector;
		sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
		PackagePtr pParams = (PackagePtr)params->fParameters;

		CommandDispatcher(pProcNum, pResult, pParams); 
	}
	catch(...)
	{

	}
}

void CommandDispatcher (int32_t pProcNum, sLONG_PTR *pResult, PackagePtr pParams)
{
#if VERSIONMAC	
	switch(pProcNum)
	{
		case kInitPlugin :
			LaunchHelper();	
			break;
			
		case kDeinitPlugin :
			TerminateHelper();
			break;
			
			// --- EK Store
			
		case 1 :
			EK_STORE_Commit(pResult, pParams);
			break;
			
			// --- EK Source
			
		case 2 :
			EK_SOURCE_Get_type(pResult, pParams);
			break;
			
		case 3 :
			EK_SOURCE_Get_title(pResult, pParams);
			break;
			
		case 4 :
			EK_SOURCE_LIST(pResult, pParams);
			break;
			
		case 5 :
			EK_SOURCE_Calendar_list(pResult, pParams);
			break;
			
			// --- EK Calendar
			
		case 6 :
			EK_CALENDAR_Get_rgb_color(pResult, pParams);
			break;
			
		case 7 :
			EK_CALENDAR_Set_rgb_color(pResult, pParams);
			break;
			
		case 8 :
			EK_CALENDAR_Remove(pResult, pParams);
			break;
			
		case 9 :
			EK_CALENDAR_Save(pResult, pParams);
			break;
			
		case 10 :
			EK_CALENDAR_Get_default(pResult, pParams);
			break;
			
		case 11 :
			EK_CALENDAR_Get_type(pResult, pParams);
			break;
			
		case 12 :
			EK_CALENDAR_LIST(pResult, pParams);
			break;
			
		case 13 :
			EK_CALENDAR_Create(pResult, pParams);
			break;
			
		case 14 :
			EK_CALENDAR_Get_title(pResult, pParams);
			break;
			
		case 15 :
			EK_CALENDAR_Set_title(pResult, pParams);
			break;
			
		case 16 :
			EK_CALENDAR_Get_source(pResult, pParams);
			break;
			
			// --- EK Object
			
		case 17 :
			EK_OBJECT_ROLLBACK(pResult, pParams);
			break;
			
		case 18 :
			EK_OBJECT_RESET(pResult, pParams);
			break;
			
		case 19 :
			EK_OBJECT_REFRESH(pResult, pParams);
			break;
			
		case 20 :
			EK_OBJECT_Has_changes(pResult, pParams);
			break;
			
		case 21 :
			EK_OBJECT_Is_new(pResult, pParams);
			break;
			
			// --- EK Item
			
		case 22 :
			EK_ITEM_Get_attendees(pResult, pParams);
			break;
			
		case 23 :
			EK_ITEM_Get_calendar(pResult, pParams);
			break;
			
		case 24 :
			EK_ITEM_Get_title(pResult, pParams);
			break;
			
		case 25 :
			EK_ITEM_Set_title(pResult, pParams);
			break;
			
		case 26 :
			EK_ITEM_Get_location(pResult, pParams);
			break;
			
		case 27 :
			EK_ITEM_Set_location(pResult, pParams);
			break;
			
		case 28 :
			EK_ITEM_Get_url(pResult, pParams);
			break;
			
		case 29 :
			EK_ITEM_Set_url(pResult, pParams);
			break;
			
		case 30 :
			EK_ITEM_Get_notes(pResult, pParams);
			break;
			
		case 31 :
			EK_ITEM_Set_notes(pResult, pParams);
			break;
			
		case 32 :
			EK_ITEM_Get_alarms(pResult, pParams);
			break;
			
		case 33 :
			EK_ITEM_Set_alarms(pResult, pParams);
			break;
			
		case 34 :
			EK_ITEM_Get_rules(pResult, pParams);
			break;
			
		case 35 :
			EK_ITEM_Set_rules(pResult, pParams);
			break;
			
		case 36 :
			EK_ITEM_Get_timezone(pResult, pParams);
			break;
			
		case 37 :
			EK_ITEM_Set_timezone(pResult, pParams);
			break;
			
		case 38 :
			EK_ITEM_Set_calendar(pResult, pParams);
			break;
			
		case 39 :
			EK_ITEM_Get_attendee_names(pResult, pParams);
			break;
			
		case 40 :
			EK_ITEM_Get_modification_date(pResult, pParams);
			break;
			
			// --- EK Reminder
			
		case 41 :
			EK_REMINDER_Create(pResult, pParams);
			break;
			
		case 42 :
			EK_REMINDER_Set_start_date(pResult, pParams);
			break;
			
		case 43 :
			EK_REMINDER_Get_start_date(pResult, pParams);
			break;
			
		case 44 :
			EK_REMINDER_Set_due_date(pResult, pParams);
			break;
			
		case 45 :
			EK_REMINDER_Get_due_date(pResult, pParams);
			break;
			
		case 46 :
			EK_REMINDER_Set_completed_date(pResult, pParams);
			break;
			
		case 47 :
			EK_REMINDER_Get_completed_date(pResult, pParams);
			break;
			
		case 48 :
			EK_REMINDER_Remove(pResult, pParams);
			break;
			
		case 49 :
			EK_REMINDER_Save(pResult, pParams);
			break;
			
			// --- EK Event
			
		case 50 :
			EK_EVENT_Create(pResult, pParams);
			break;
			
		case 51 :
			EK_EVENT_Set_start_date(pResult, pParams);
			break;
			
		case 52 :
			EK_EVENT_Get_start_date(pResult, pParams);
			break;
			
		case 53 :
			EK_EVENT_Set_end_date(pResult, pParams);
			break;
			
		case 54 :
			EK_EVENT_Get_end_date(pResult, pParams);
			break;
			
		case 55 :
			EK_EVENT_Get_occurrence_date(pResult, pParams);
			break;
			
		case 56 :
			EK_EVENT_Get_status(pResult, pParams);
			break;
			
		case 57 :
			EK_EVENT_Get_all_day(pResult, pParams);
			break;
			
		case 58 :
			EK_EVENT_Set_all_day(pResult, pParams);
			break;
			
		case 59 :
			EK_EVENT_Get_organizer_name(pResult, pParams);
			break;
			
		case 60 :
			EK_EVENT_Save(pResult, pParams);
			break;
			
		case 61 :
			EK_EVENT_Remove(pResult, pParams);
			break;
			
			// --- EK Query
			
		case 62 :
			EK_QUERY_EVENT(pResult, pParams);
			break;
			
		case 63 :
			EK_QUERY_COMPLETE_REMINDER(pResult, pParams);
			break;
			
		case 64 :
			EK_QUERY_INCOMPLETE_REMINDER(pResult, pParams);
			break;			
	}
#endif	
}

#if VERSIONMAC

#pragma mark -
#pragma mark STORE
#pragma mark -

void EK_STORE_Commit(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT returnValue;
	returnValue.setIntValue(_STORE_Commit());
	returnValue.setReturn(pResult);
}

#pragma mark -
#pragma mark SOURCE
#pragma mark -

void EK_SOURCE_LIST(sLONG_PTR *pResult, PackagePtr pParams)
{
	ARRAY_TEXT Param1;
	
	_SOURCE_LIST(Param1);
	Param1.toParamAtIndex(pParams, 1);
}

void EK_SOURCE_Get_title(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_TEXT Param2;
	C_LONGINT returnValue;
	
	Param1.fromParamAtIndex(pParams, 1);
	returnValue.setIntValue(_SOURCE_Get_title(Param1, Param2));
	Param2.toParamAtIndex(pParams, 2);
	returnValue.setReturn(pResult);
}

void EK_SOURCE_Get_type(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_LONGINT Param2;
	C_LONGINT returnValue;
	
	Param1.fromParamAtIndex(pParams, 1);
	returnValue.setIntValue(_SOURCE_Get_type(Param1, Param2));
	Param2.toParamAtIndex(pParams, 2);
	returnValue.setReturn(pResult);
}

void EK_SOURCE_Calendar_list(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	ARRAY_TEXT Param2;
	C_LONGINT Param3;
	C_LONGINT returnValue;
	
	Param1.fromParamAtIndex(pParams, 1);
	Param3.fromParamAtIndex(pParams, 3);
	returnValue.setIntValue(_SOURCE_Calendar_list(Param1, Param2, Param3));	
	Param2.toParamAtIndex(pParams, 2);
	returnValue.setReturn(pResult);
}

#pragma mark -
#pragma mark CALENDAR
#pragma mark -

void EK_CALENDAR_LIST(sLONG_PTR *pResult, PackagePtr pParams)
{
	ARRAY_TEXT Param1;
	C_LONGINT Param2;
	
	Param2.fromParamAtIndex(pParams, 2);
	_CALENDAR_LIST(Param1, Param2);
	Param1.toParamAtIndex(pParams, 1);
}

void EK_CALENDAR_Get_default(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_TEXT Param2;
	C_LONGINT returnValue;
	
	Param1.fromParamAtIndex(pParams, 1);
	returnValue.setIntValue(_CALENDAR_Get_default(Param1, Param2));
	Param2.toParamAtIndex(pParams, 2);	
	returnValue.setReturn(pResult);
}

void EK_CALENDAR_Get_title(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_TEXT Param2;
	C_LONGINT returnValue;
	
	Param1.fromParamAtIndex(pParams, 1);
	returnValue.setIntValue(_CALENDAR_Get_title(Param1, Param2));
	Param2.toParamAtIndex(pParams, 2);
	returnValue.setReturn(pResult);	
}

void EK_CALENDAR_Set_title(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_TEXT Param2;
	C_LONGINT returnValue;
	
	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
	returnValue.setIntValue(_CALENDAR_Set_title(Param1, Param2));
	returnValue.setReturn(pResult);
}

void EK_CALENDAR_Get_type(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_LONGINT Param2;
	C_LONGINT returnValue;
	
	Param1.fromParamAtIndex(pParams, 1);
	returnValue.setIntValue(_CALENDAR_Get_type(Param1, Param2));
	Param2.toParamAtIndex(pParams, 2);
	returnValue.setReturn(pResult);
}

void EK_CALENDAR_Save(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_LONGINT returnValue;
	
	Param1.fromParamAtIndex(pParams, 1);
	returnValue.setIntValue(_CALENDAR_Save(Param1));
	returnValue.setReturn(pResult);
}

void EK_CALENDAR_Create(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_LONGINT Param2;
	C_TEXT returnValue;
	
	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
	_CALENDAR_Create(Param1, Param2, returnValue);
	returnValue.setReturn(pResult);
}

void EK_CALENDAR_Remove(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_LONGINT returnValue;
	
	Param1.fromParamAtIndex(pParams, 1);
	returnValue.setIntValue(_CALENDAR_Remove(Param1));
	returnValue.setReturn(pResult);
}

void EK_CALENDAR_Get_source(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_TEXT Param2;
	C_LONGINT returnValue;
	
	Param1.fromParamAtIndex(pParams, 1);
	returnValue.setIntValue(_CALENDAR_Get_source(Param1, Param2));
	Param2.toParamAtIndex(pParams, 2);
	returnValue.setReturn(pResult);
}

void EK_CALENDAR_Get_rgb_color(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_REAL Param2;
	C_REAL Param3;
	C_REAL Param4;
	C_LONGINT returnValue;
	
	Param1.fromParamAtIndex(pParams, 1);
	returnValue.setIntValue(_CALENDAR_Get_rgb_color(Param1, Param2, Param3, Param4));
	Param2.toParamAtIndex(pParams, 2);
	Param3.toParamAtIndex(pParams, 3);
	Param4.toParamAtIndex(pParams, 4);
	returnValue.setReturn(pResult);
}

void EK_CALENDAR_Set_rgb_color(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_REAL Param2;
	C_REAL Param3;
	C_REAL Param4;
	C_LONGINT returnValue;
	
	Param1.fromParamAtIndex(pParams, 1);
	returnValue.setIntValue(_CALENDAR_Set_rgb_color(Param1, Param2, Param3, Param4));
	Param2.toParamAtIndex(pParams, 2);
	Param3.toParamAtIndex(pParams, 3);
	Param4.toParamAtIndex(pParams, 4);
	returnValue.setReturn(pResult);
}

#pragma mark -
#pragma mark REMINDER
#pragma mark -

void EK_REMINDER_Create(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_TEXT returnValue;
	
	Param1.fromParamAtIndex(pParams, 1);
	_REMINDER_Create(Param1, returnValue);
	returnValue.setReturn(pResult);
}

void EK_REMINDER_Save(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_LONGINT returnValue;
	
	Param1.fromParamAtIndex(pParams, 1);
	returnValue.setIntValue(_REMINDER_Save(Param1));
	returnValue.setReturn(pResult);
}

void EK_REMINDER_Remove(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_LONGINT returnValue;
	
	Param1.fromParamAtIndex(pParams, 1);
	returnValue.setIntValue(_REMINDER_Remove(Param1));
	returnValue.setReturn(pResult);
}

void EK_REMINDER_Get_start_date(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_DATE Param2;
	C_TIME Param3;
	C_LONGINT returnValue;
	
	Param1.fromParamAtIndex(pParams, 1);
	returnValue.setIntValue(_REMINDER_Get_start_date(Param1, Param2, Param3));
	Param2.toParamAtIndex(pParams, 2);
	Param3.toParamAtIndex(pParams, 3);
	returnValue.setReturn(pResult);
}

void EK_REMINDER_Set_start_date(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_DATE Param2;
	C_TIME Param3;
	C_LONGINT returnValue;
	
	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
	Param3.fromParamAtIndex(pParams, 3);
	returnValue.setIntValue(_REMINDER_Set_start_date(Param1, Param2, Param3));
	returnValue.setReturn(pResult);
}

void EK_REMINDER_Get_due_date(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_DATE Param2;
	C_TIME Param3;
	C_LONGINT returnValue;
	
	Param1.fromParamAtIndex(pParams, 1);
	returnValue.setIntValue(_REMINDER_Get_due_date(Param1, Param2, Param3));
	Param2.toParamAtIndex(pParams, 2);
	Param3.toParamAtIndex(pParams, 3);
	returnValue.setReturn(pResult);
}

void EK_REMINDER_Set_due_date(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_DATE Param2;
	C_TIME Param3;
	C_LONGINT returnValue;
	
	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
	Param3.fromParamAtIndex(pParams, 3);
	returnValue.setIntValue(_REMINDER_Set_due_date(Param1, Param2, Param3));
	returnValue.setReturn(pResult);
}

void EK_REMINDER_Get_completed_date(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_DATE Param2;
	C_TIME Param3;
	C_LONGINT returnValue;
	
	Param1.fromParamAtIndex(pParams, 1);
	returnValue.setIntValue(_REMINDER_Get_completed_date(Param1, Param2, Param3));
	Param2.toParamAtIndex(pParams, 2);
	Param3.toParamAtIndex(pParams, 3);
	returnValue.setReturn(pResult);
}

void EK_REMINDER_Set_completed_date(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_DATE Param2;
	C_TIME Param3;
	C_LONGINT returnValue;
	
	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
	Param3.fromParamAtIndex(pParams, 3);
	returnValue.setIntValue(_REMINDER_Set_completed_date(Param1, Param2, Param3));
	returnValue.setReturn(pResult);
}

#pragma mark -
#pragma mark EVENT
#pragma mark -

void EK_EVENT_Create(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_TEXT returnValue;
	
	Param1.fromParamAtIndex(pParams, 1);
	_EVENT_Create(Param1, returnValue);
	returnValue.setReturn(pResult);
}

void EK_EVENT_Save(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_LONGINT returnValue;
	
	Param1.fromParamAtIndex(pParams, 1);
	returnValue.setIntValue(_EVENT_Save(Param1));
	returnValue.setReturn(pResult);
}

void EK_EVENT_Remove(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_LONGINT returnValue;
	
	Param1.fromParamAtIndex(pParams, 1);
	returnValue.setIntValue(_EVENT_Remove(Param1));		
	returnValue.setReturn(pResult);
}

void EK_EVENT_Get_start_date(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_DATE Param2;
	C_TIME Param3;
	C_LONGINT returnValue;
	
	Param1.fromParamAtIndex(pParams, 1);
	returnValue.setIntValue(_EVENT_Get_start_date(Param1, Param2, Param3));	
	Param2.toParamAtIndex(pParams, 2);
	Param3.toParamAtIndex(pParams, 3);
	returnValue.setReturn(pResult);
}

void EK_EVENT_Set_start_date(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_DATE Param2;
	C_TIME Param3;
	C_LONGINT returnValue;
	
	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
	Param3.fromParamAtIndex(pParams, 3);
	returnValue.setIntValue(_EVENT_Set_start_date(Param1, Param2, Param3));		
	returnValue.setReturn(pResult);
}

void EK_EVENT_Get_end_date(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_DATE Param2;
	C_TIME Param3;
	C_LONGINT returnValue;
	
	Param1.fromParamAtIndex(pParams, 1);
	returnValue.setIntValue(_EVENT_Get_end_date(Param1, Param2, Param3));
	Param2.toParamAtIndex(pParams, 2);
	Param3.toParamAtIndex(pParams, 3);
	returnValue.setReturn(pResult);
}

void EK_EVENT_Set_end_date(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_DATE Param2;
	C_TIME Param3;
	C_LONGINT returnValue;
	
	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
	Param3.fromParamAtIndex(pParams, 3);
	returnValue.setIntValue(_EVENT_Set_end_date(Param1, Param2, Param3));
	returnValue.setReturn(pResult);
}

void EK_EVENT_Get_occurrence_date(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_DATE Param2;
	C_TIME Param3;
	C_LONGINT returnValue;
	
	Param1.fromParamAtIndex(pParams, 1);
	returnValue.setIntValue(_EVENT_Get_occurrence_date(Param1, Param2, Param3));	
	Param2.toParamAtIndex(pParams, 2);
	Param3.toParamAtIndex(pParams, 3);
	returnValue.setReturn(pResult);
}

void EK_EVENT_Get_status(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_LONGINT Param2;
	C_LONGINT returnValue;
	
	Param1.fromParamAtIndex(pParams, 1);	
	returnValue.setIntValue(_EVENT_Get_status(Param1, Param2));	
	Param2.toParamAtIndex(pParams, 2);
	returnValue.setReturn(pResult);
}

void EK_EVENT_Get_all_day(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_LONGINT Param2;
	C_LONGINT returnValue;
	
	Param1.fromParamAtIndex(pParams, 1);
	returnValue.setIntValue(_EVENT_Get_all_day(Param1, Param2));
	Param2.toParamAtIndex(pParams, 2);
	returnValue.setReturn(pResult);
}

void EK_EVENT_Set_all_day(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_LONGINT Param2;
	C_LONGINT returnValue;
	
	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
	returnValue.setIntValue(_EVENT_Set_all_day(Param1, Param2));
	returnValue.setReturn(pResult);
}

void EK_EVENT_Get_organizer_name(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_TEXT Param2;
	C_LONGINT returnValue;
	
	Param1.fromParamAtIndex(pParams, 1);
	returnValue.setIntValue(_EVENT_Get_organizer_name(Param1, Param2));
	Param2.toParamAtIndex(pParams, 2);
	returnValue.setReturn(pResult);
}

#pragma mark -
#pragma mark ITEM
#pragma mark -

void EK_ITEM_Get_title(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_TEXT Param2;
	C_LONGINT returnValue;
	
	Param1.fromParamAtIndex(pParams, 1);
	returnValue.setIntValue(_ITEM_Get_title(Param1, Param2));
	Param2.toParamAtIndex(pParams, 2);
	returnValue.setReturn(pResult);	
}

void EK_ITEM_Set_title(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_TEXT Param2;
	C_LONGINT returnValue;
	
	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);	
	returnValue.setIntValue(_ITEM_Set_title(Param1, Param2));
	returnValue.setReturn(pResult);	
}

void EK_ITEM_Get_calendar(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_TEXT Param2;
	C_LONGINT returnValue;
	
	Param1.fromParamAtIndex(pParams, 1);
	returnValue.setIntValue(_ITEM_Get_calendar(Param1, Param2));
	Param2.toParamAtIndex(pParams, 2);
	returnValue.setReturn(pResult);
}

void EK_ITEM_Set_calendar(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_TEXT Param2;
	C_LONGINT returnValue;
	
	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
	returnValue.setIntValue(_ITEM_Set_calendar(Param1, Param2));
	returnValue.setReturn(pResult);
}

void EK_ITEM_Get_location(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_TEXT Param2;
	C_LONGINT returnValue;
	
	Param1.fromParamAtIndex(pParams, 1);
	returnValue.setIntValue(_ITEM_Get_location(Param1, Param2));
	Param2.toParamAtIndex(pParams, 2);
	returnValue.setReturn(pResult);
}

void EK_ITEM_Set_location(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_TEXT Param2;
	C_LONGINT returnValue;
	
	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
	returnValue.setIntValue(_ITEM_Set_location(Param1, Param2));
	returnValue.setReturn(pResult);
}

void EK_ITEM_Get_url(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_TEXT Param2;
	C_LONGINT returnValue;
	
	Param1.fromParamAtIndex(pParams, 1);
	returnValue.setIntValue(_ITEM_Get_url(Param1, Param2));
	Param2.toParamAtIndex(pParams, 2);
	returnValue.setReturn(pResult);
}

void EK_ITEM_Set_url(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_TEXT Param2;
	C_LONGINT returnValue;
	
	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
	returnValue.setIntValue(_ITEM_Set_url(Param1, Param2));
	returnValue.setReturn(pResult);
}

void EK_ITEM_Get_notes(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_TEXT Param2;
	C_LONGINT returnValue;
	
	Param1.fromParamAtIndex(pParams, 1);
	returnValue.setIntValue(_ITEM_Get_notes(Param1, Param2));
	Param2.toParamAtIndex(pParams, 2);
	returnValue.setReturn(pResult);
}

void EK_ITEM_Set_notes(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_TEXT Param2;
	C_LONGINT returnValue;
	
	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
	returnValue.setIntValue(_ITEM_Set_notes(Param1, Param2));
	returnValue.setReturn(pResult);
}

void EK_ITEM_Get_alarms(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	ARRAY_TEXT Param2;
	C_LONGINT returnValue;
	
	Param1.fromParamAtIndex(pParams, 1);
	returnValue.setIntValue(_ITEM_Get_alarms(Param1, Param2));
	Param2.toParamAtIndex(pParams, 2);
	returnValue.setReturn(pResult);
}

void EK_ITEM_Set_alarms(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	ARRAY_TEXT Param2;
	C_LONGINT returnValue;
	
	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
	returnValue.setIntValue(_ITEM_Set_alarms(Param1, Param2));
	returnValue.setReturn(pResult);
}

void EK_ITEM_Get_rules(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	ARRAY_TEXT Param2;
	C_LONGINT returnValue;
	
	Param1.fromParamAtIndex(pParams, 1);
	returnValue.setIntValue(_ITEM_Get_rules(Param1, Param2));
	Param2.toParamAtIndex(pParams, 2);
	returnValue.setReturn(pResult);
}

void EK_ITEM_Set_rules(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	ARRAY_TEXT Param2;
	C_LONGINT returnValue;
	
	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
	returnValue.setIntValue(_ITEM_Set_rules(Param1, Param2));
	returnValue.setReturn(pResult);
}

void EK_ITEM_Get_timezone(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_TEXT Param2;
	C_LONGINT returnValue;
	
	Param1.fromParamAtIndex(pParams, 1);
	returnValue.setIntValue(_ITEM_Get_timezone(Param1, Param2));
	Param2.toParamAtIndex(pParams, 2);
	returnValue.setReturn(pResult);
}

void EK_ITEM_Set_timezone(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_TEXT Param2;
	C_LONGINT returnValue;
	
	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
	returnValue.setIntValue(_ITEM_Set_timezone(Param1, Param2));
	returnValue.setReturn(pResult);
}

void EK_ITEM_Get_attendee_names(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	ARRAY_TEXT Param2;
	C_LONGINT returnValue;
	
	Param1.fromParamAtIndex(pParams, 1);
	returnValue.setIntValue(_ITEM_Get_attendee_names(Param1, Param2));
	Param2.toParamAtIndex(pParams, 2);
	returnValue.setReturn(pResult);
}

void EK_ITEM_Get_modification_date(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_DATE Param2;
	C_TIME Param3;
	C_LONGINT returnValue;
	
	Param1.fromParamAtIndex(pParams, 1);
	returnValue.setIntValue(_ITEM_Get_modification_date(Param1, Param2, Param3));
	Param2.toParamAtIndex(pParams, 2);
	Param3.toParamAtIndex(pParams, 3);
	returnValue.setReturn(pResult);
}

void EK_ITEM_Get_attendees(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	ARRAY_TEXT Param2;
	C_LONGINT returnValue;
	
	Param1.fromParamAtIndex(pParams, 1);
	returnValue.setIntValue(_ITEM_Get_attendees(Param1, Param2));
	Param2.toParamAtIndex(pParams, 2);
	returnValue.setReturn(pResult);
}

#pragma mark -
#pragma mark OBJECT
#pragma mark -

void EK_OBJECT_ROLLBACK(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	
	Param1.fromParamAtIndex(pParams, 1);
	_OBJECT_ROLLBACK(Param1);
}

void EK_OBJECT_RESET(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	
	Param1.fromParamAtIndex(pParams, 1);
	_OBJECT_RESET(Param1);
}

void EK_OBJECT_REFRESH(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	
	Param1.fromParamAtIndex(pParams, 1);
	_OBJECT_REFRESH(Param1);
}

void EK_OBJECT_Has_changes(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_LONGINT Param2;
	C_LONGINT returnValue;
	
	Param1.fromParamAtIndex(pParams, 1);
	returnValue.setIntValue(_OBJECT_Has_changes(Param1, Param2));
	Param2.toParamAtIndex(pParams, 2);
	returnValue.setReturn(pResult);
}

void EK_OBJECT_Is_new(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_LONGINT Param2;
	C_LONGINT returnValue;
	
	Param1.fromParamAtIndex(pParams, 1);
	returnValue.setIntValue(_OBJECT_Is_new(Param1, Param2));
	Param2.toParamAtIndex(pParams, 2);
	returnValue.setReturn(pResult);
}

#pragma mark -
#pragma mark QUERY
#pragma mark -

void EK_QUERY_EVENT(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_DATE Param1;
	C_TIME Param2;
	C_DATE Param3;
	C_TIME Param4;
	ARRAY_TEXT Param5;
	ARRAY_TEXT Param6;
	
	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
	Param3.fromParamAtIndex(pParams, 3);
	Param4.fromParamAtIndex(pParams, 4);
	Param5.fromParamAtIndex(pParams, 5);
	_QUERY_EVENT(Param1, Param2, Param3, Param4, Param5, Param6);
	Param6.toParamAtIndex(pParams, 6);
}

void EK_QUERY_COMPLETE_REMINDER(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_DATE Param1;
	C_TIME Param2;
	C_DATE Param3;
	C_TIME Param4;
	ARRAY_TEXT Param5;
	ARRAY_TEXT Param6;
	
	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
	Param3.fromParamAtIndex(pParams, 3);
	Param4.fromParamAtIndex(pParams, 4);
	Param5.fromParamAtIndex(pParams, 5);
	_QUERY_COMPLETE_REMINDER(Param1, Param2, Param3, Param4, Param5, Param6);
	Param6.toParamAtIndex(pParams, 6);
}

void EK_QUERY_INCOMPLETE_REMINDER(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_DATE Param1;
	C_TIME Param2;
	C_DATE Param3;
	C_TIME Param4;
	ARRAY_TEXT Param5;
	ARRAY_TEXT Param6;
	
	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
	Param3.fromParamAtIndex(pParams, 3);
	Param4.fromParamAtIndex(pParams, 4);
	Param5.fromParamAtIndex(pParams, 5);
	_QUERY_INCOMPLETE_REMINDER(Param1, Param2, Param3, Param4, Param5, Param6);
	Param6.toParamAtIndex(pParams, 6);
}

#endif